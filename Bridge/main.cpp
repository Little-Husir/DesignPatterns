#include <QCoreApplication>
#include "refined_abstraction.h"
#include "concrete_implementor.h"

#ifndef SAFE_DELETE
#define SAFE_DELETE(p) { if(p){delete p; p=nullptr;} }
#endif

/*
  （Bridge Pattern）是将抽象部分与它的实现部分分离，使它们都可以独立地变化。
       Abstraction（抽象类）：用于定义抽象类的接口，并且维护一个指向 Implementor 实现类的指针。它与 Implementor 之间具有关联关系。
       RefinedAbstraction（扩充抽象类）：扩充由 Abstraction 定义的接口，在 RefinedAbstraction 中可以调用在 Implementor 中定义的业务方法。
       Implementor（实现类接口）：定义实现类的接口，这个接口不一定要与 Abstraction 的接口完全一致，事实上这两个接口可以完全不同。
       ConcreteImplementor（具体实现类）：实现了 Implementor 定义的接口，在不同的 ConcreteImplementor 中提供基本操作的不同实现。在程序运行时，ConcreteImplementor 对象将替换其父类对象，提供给 Abstraction 具体的业务操作方法。

   优点：
       1.分离抽象和实现部分。桥接模式使用“对象间的关联关系”解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。
         所谓抽象和实现沿着各自维度的变化，也就是说抽象和实现不再在同一个继承层次结构中，而是“子类化”它们，使它们各自都具有自己的子类，
         以便任何组合子类，从而获得多维度组合对象。
       2.在很多情况下，桥接模式可以取代多层继承方案，多层继承方案违背了“单一职责原则”，复用性较差，且类的个数非常多，
         桥接模式是比多层继承方案更好的解决方法，它极大减少了子类的个数。
       3.桥接模式提高了系统的可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统，符合“开闭原则”。
       4.将抽象与实现分离，使它们可以独立变化。它是用关联关系（组合或聚合关系）代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。
          例如：形状-抽象类，颜色-抽象类，如何让他们像一个桥一样，产生关系？
               形状拥有了颜色 这样产生了关系。

   缺点：
       1.桥接模式的使用会增加系统的理解与设计难度，由于关联关系建立在抽象层，要求开发者一开始就针对抽象层进行设计与编程。
       2.桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性，如何正确识别两个独立维度也需要一定的经验积累。

   适用场景：
       1.如果一个系统需要在抽象化和具体化之间增加更多的灵活性，避免在两个层次之间建立静态的继承关系，通过桥接模式可以使它们在抽象层建立一个关联关系。
       2.“抽象部分”和“实现部分”可以以继承的方式独立扩展而互不影响，在程序运行时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合。
       3.一个系统存在多个（≥ 2）独立变化的维度，且这多个维度都需要独立进行扩展。
       4.对于那些不希望使用继承或因为多层继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。

   案例分析：
       电器是现代生活必不可少的东西，几乎每家每户都有，电视、风扇、电灯。。。无论什么电器，都由开关控制。开关种类众多，有拉链式开关、两位开关、调光开关。。。
       不管任何时候，都可以在不触及其它东西的情况下更换设备。例如，可以在不更换开关的情况下换掉灯泡，也可以在不接触灯泡或风扇的情况下更换开关，甚至可以在不接触开关的情况下将灯泡和风扇互换。
       这看起来很自然，当然也应该这样！当不同的事物联系到一起时，它们应该在一个可以变更或者替换的系统中，以便不相互影响或者影响尽可能的小，这样才能更方便、更低成本地去管理系统。想象一下，如果要换房间里的一个灯泡，得要求把开关也换了，你会考虑使用这样的系统吗？

   大话设计模式笔记：
       对象的继承关系是在编译时就定义好了，所以无法在运行时改变从父类继承的实现，子类的实现与它的父类有非常紧密的依赖关系
       以至于父类实现中的任何变化必然会导致子类发生变化，当你需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写
       或被其他更合适的替换，这种依赖关系限制了灵活性并最终限制了复用性，如果不断的增加新产品或新功能，类会越来越多的，
       在面向对象设计中，还有一个很重要的设计原则，那就是"合成/聚合复用"原则，即优先使用对象合成/聚合，而不是类继承

       合成和聚合都是关联的特殊种类：
            聚合表示一种弱的"拥有"关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分
            合成则是一种强的"拥有"关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样

       合成/聚合复用原则的好处是：
            优先使用对象的合成/聚合将有助于你保持每个类被封装，并被集中在单个任务上，这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物

 */

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    // 创建电器 - 电灯、风扇
    IEquipment *light = new Light();//多态-父类IEquipment指向子类light
    IEquipment *fan = new Fan();

    /**
     * 创建开关 - 拉链式开关、两位开关
     * 将拉链式开关和电灯关联起来，将两位开关和风扇关联起来
     **/
    //多态-父类ISwitch指向子类PullChainSwitch
    ISwitch *pullChain = new PullChainSwitch(light);//将拉链式开关和电灯关联起来
    ISwitch *twoPosition = new TwoPositionSwitch(fan);

    // 开灯、关灯
    pullChain->On();//实际调用Light->PowerOn()
    pullChain->Off();

    // 打开风扇、关闭风扇
    twoPosition->On();
    twoPosition->Off();

    SAFE_DELETE(twoPosition);
    SAFE_DELETE(pullChain);
    SAFE_DELETE(fan);
    SAFE_DELETE(light);

    getchar();

    return 0;


    return a.exec();
}
